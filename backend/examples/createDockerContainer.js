// Ребята, давайте раскроем тему создания docker контейнера, в котором будет всегда актуальный код из файловой системы нашего компьютера.
// Как прокидывать изменения без пересборки контейнера?
// Используется volume (bind mount) - вы монтируете свою локальную папку с кодом внутрь контейнера.
// Тогда контейнер запускается один раз, а изменения в коде автоматически «видны» внутри.
// Пример с docker-compose.yml:

// version: "3.9"
// services:
//   app:
//     build: .
//     volumes:
//       - ./src:/usr/src/app/src          # монтируем локальную папку с кодом
//       - /usr/src/app/node_modules       # заглушка, чтобы не перетирались node_modules
//     ports:
//       - "3000:3000"
//     command: npm run dev                # запускаем через nodemon
// Будет ли работать nodemon?
// Да
// Когда меняете код локально, изменения автоматически появляются внутри контейнера (через volume).
// nodemon, запущенный в контейнере, увидит эти изменения и перезапустит приложение.
//  Иногда в Docker наблюдаются проблемы с отслеживанием файлов (особенно на Windows/Mac через WSL/Colima).
//  Тогда помогает запуск nodemon с флагом:

// nodemon --legacy-watch src/index.ts
// Важный момент - зависимости
// Не монтируйте локальные node_modules, т.к. они собраны под вашу ОС, а контейнер использует Linux.
// Обычно делают так:

// volumes:
//   - ./src:/usr/src/app/src
//   - /usr/src/app/node_modules
// Это значит: код монтируем, а node_modules берём из контейнера.
// Итог
// Контейнер собираете один раз (для установки зависимостей).
// Потом все изменения кода подтягиваются через volume, а nodemon внутри контейнера перезапускает сервер.
// Пересборка контейнера нужна только если поменялся package.json или Dockerfile.